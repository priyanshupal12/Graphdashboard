{
  "version": 3,
  "sources": ["../../node_modules/@nivo/arcs/src/arc_labels/ArcLabel.tsx", "../../node_modules/@nivo/arcs/src/utils.ts", "../../node_modules/@nivo/arcs/src/arcTransitionMode.ts", "../../node_modules/@nivo/arcs/src/centers.ts", "../../node_modules/@nivo/arcs/src/arc_labels/ArcLabelsLayer.tsx", "../../node_modules/@nivo/arcs/src/arc_labels/canvas.ts", "../../node_modules/@nivo/arcs/src/arc_labels/useArcLabels.ts", "../../node_modules/@nivo/arcs/src/arc_labels/index.ts", "../../node_modules/@nivo/arcs/src/arc_link_labels/ArcLinkLabel.tsx", "../../node_modules/@nivo/arcs/src/arc_link_labels/compute.ts", "../../node_modules/@nivo/arcs/src/arc_link_labels/useArcLinkLabelsTransition.ts", "../../node_modules/@nivo/arcs/src/arc_link_labels/ArcLinkLabelsLayer.tsx", "../../node_modules/@nivo/arcs/src/arc_link_labels/canvas.ts", "../../node_modules/@nivo/arcs/src/arc_link_labels/useArcLinks.ts", "../../node_modules/@nivo/arcs/src/arc_link_labels/useArcLinkLabels.ts", "../../node_modules/@nivo/arcs/src/arc_link_labels/index.ts", "../../node_modules/@nivo/arcs/src/ArcLine.tsx", "../../node_modules/@nivo/arcs/src/ArcShape.tsx", "../../node_modules/@nivo/arcs/src/interpolateArc.ts", "../../node_modules/@nivo/arcs/src/useArcsTransition.ts", "../../node_modules/@nivo/arcs/src/ArcsLayer.tsx", "../../node_modules/@nivo/arcs/src/boundingBox.ts", "../../node_modules/@nivo/arcs/src/interactivity.ts", "../../node_modules/@nivo/arcs/src/useAnimatedArc.ts", "../../node_modules/@nivo/arcs/src/useArcGenerator.ts", "../../node_modules/@nivo/pie/src/PieLegends.tsx", "../../node_modules/@nivo/pie/src/props.ts", "../../node_modules/@nivo/pie/src/PieTooltip.tsx", "../../node_modules/@nivo/pie/src/hooks.ts", "../../node_modules/@nivo/pie/src/Arcs.tsx", "../../node_modules/@nivo/pie/src/Pie.tsx", "../../node_modules/@nivo/pie/src/ResponsivePie.tsx", "../../node_modules/@nivo/pie/src/PieCanvas.tsx", "../../node_modules/@nivo/pie/src/ResponsivePieCanvas.tsx"],
  "sourcesContent": ["import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { Text } from '@nivo/text'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <Text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </Text>\n        </animated.g>\n    )\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n", "import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = (typeof arcTransitionModes)[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, never>,\n> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport type ArcTransitionProps<ExtraProps extends Record<string, any> = Record<string, never>> =\n    Arc & {\n        progress: number\n    } & ExtraProps\n\nexport const useArcTransitionMode = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, never>,\n>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) =>\n                ({\n                    progress: 0,\n                    ...transitionMode.enter(datum.arc),\n                    ...(extraTransition ? extraTransition.enter(datum) : {}),\n                }) as ArcTransitionProps<ExtraProps>,\n            update: (datum: Datum) =>\n                ({\n                    progress: 1,\n                    ...transitionMode.update(datum.arc),\n                    ...(extraTransition ? extraTransition.update(datum) : {}),\n                }) as ArcTransitionProps<ExtraProps>,\n            leave: (datum: Datum) =>\n                ({\n                    progress: 0,\n                    ...transitionMode.leave(datum.arc),\n                    ...(extraTransition ? extraTransition.leave(datum) : {}),\n                }) as ArcTransitionProps<ExtraProps>,\n        }\n    }, [mode, extraTransition])\n", "import { useMemo } from 'react'\nimport { useTransition, to, SpringValue, TransitionFn } from '@react-spring/web'\nimport { midAngle, positionFromAngle, useMotionConfig } from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport {\n    ArcTransitionMode,\n    ArcTransitionProps,\n    TransitionExtra,\n    useArcTransitionMode,\n} from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, never>,\n>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<Datum, ArcTransitionProps<ExtraProps>>(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    }) as unknown as TransitionFn<Datum, ArcTransitionProps<ExtraProps>>\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, never>,\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({}) as ExtraProps,\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n", "import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    skipRadius: ArcLabelsProps<Datum>['arcLabelsSkipRadius']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    skipRadius,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                const angle = Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle))\n                const radius = Math.abs(datum.arc.outerRadius - datum.arc.innerRadius)\n\n                return angle >= skipAngle && radius >= skipRadius\n            }),\n        [data, skipAngle, skipRadius]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        progress: transitionProps.progress,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import { Theme } from '@nivo/theming'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: Theme\n) => {\n    setCanvasFont(ctx, theme.labels.text)\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n\n    labels.forEach(label => {\n        drawCanvasText(\n            ctx,\n            {\n                ...theme.labels.text,\n                fill: label.textColor,\n            },\n            String(label.label),\n            label.x,\n            label.y\n        )\n    })\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n", "import { ArcLabel } from './ArcLabel'\n\nexport const ArcLabelComponent = ArcLabel\nexport * from './ArcLabelsLayer'\nexport * from './canvas'\nexport * from './props'\nexport * from './useArcLabels'\n", "import { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { Text } from '@nivo/text'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <Text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </Text>\n        </animated.g>\n    )\n}\n", "import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n", "import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor, offset]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n", "import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import {\n    // @ts-expect-error no types\n    textPropsByEngine,\n} from '@nivo/core'\nimport { Theme } from '@nivo/theming'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: Theme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    setCanvasFont(ctx, theme.labels.text)\n\n    labels.forEach(label => {\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        drawCanvasText(\n            ctx,\n            {\n                ...theme.labels.text,\n                fill: label.textColor,\n            },\n            String(label.label),\n            label.x,\n            label.y\n        )\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>,\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({}) as ExtraProps,\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n", "import { ArcLinkLabel } from './ArcLinkLabel'\n\nexport const ArcLinkLabelComponent = ArcLinkLabel\nexport * from './ArcLinkLabelsLayer'\nexport * from './canvas'\nexport * from './compute'\nexport * from './props'\nexport * from './types'\nexport * from './useArcLinkLabels'\nexport * from './useArcLinkLabelsTransition'\nexport * from './useArcLinks'\n", "import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n", "import { useCallback, MouseEvent } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onClick?.(datum, event),\n        [onClick, datum]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseMove?.(datum, event),\n        [onMouseMove, datum]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n            data-testid={`arc.${datum.id}`}\n        />\n    )\n}\n", "import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n", "import { TransitionFn, useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport {\n    ArcTransitionMode,\n    useArcTransitionMode,\n    TransitionExtra,\n    ArcTransitionProps,\n} from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, never>,\n>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<Datum, ArcTransitionProps<ExtraProps>>(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    }) as unknown as TransitionFn<Datum, ArcTransitionProps<ExtraProps>>\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n", "import { createElement } from 'react'\nimport { useTheme } from '@nivo/theming'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n", "import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n", "import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n", "import { useSpring } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { Arc, ArcGenerator } from './types'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a single arc,\n * if you want to animate a group of arcs,\n * please have a look at the `useArcsTransition` hook.\n */\nexport const useAnimatedArc = (datumWithArc: { arc: Arc }, arcGenerator: ArcGenerator) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedValues = useSpring({\n        startAngle: datumWithArc.arc.startAngle,\n        endAngle: datumWithArc.arc.endAngle,\n        innerRadius: datumWithArc.arc.innerRadius,\n        outerRadius: datumWithArc.arc.outerRadius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        ...animatedValues,\n        path: interpolateArc(\n            animatedValues.startAngle,\n            animatedValues.endAngle,\n            animatedValues.innerRadius,\n            animatedValues.outerRadius,\n            arcGenerator\n        ),\n    }\n}\n", "import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n", "import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, DatumId, LegendDatum } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: LegendDatum<RawDatum>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nexport const PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i: number) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n", "import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n    layers: ['arcs', 'arcLinkLabels', 'arcLabels', 'legends'],\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsSkipRadius: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n    isInteractive: true,\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n    tooltip: PieTooltip,\n    legends: [],\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? (window.devicePixelRatio ?? 1) : 1,\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n", "import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport {\n    MayHaveLabel,\n    CompletePieSvgProps,\n    ComputedDatum,\n    DatumId,\n    PieArc,\n    PieCustomLayerProps,\n    LegendDatum,\n    CommonPieProps,\n} from './types'\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: readonly RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n    forwardLegendData,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n    forwardLegendData?: CommonPieProps<RawDatum>['forwardLegendData']\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: LegendDatum<RawDatum>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    const result = useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData: LegendDatum<RawDatum>[] = data.map(item => ({\n            id: item.id,\n            label: item.label,\n            color: item.color,\n            hidden: hiddenIds.includes(item.id),\n            data: item,\n        }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n\n    // Forward the legends data if `forwardLegendData` is defined.\n    const legendData = result.legendData\n    const forwardLegendDataRef = useRef(forwardLegendData)\n    useEffect(() => {\n        if (typeof forwardLegendDataRef.current !== 'function') return\n        forwardLegendDataRef.current(legendData)\n    }, [forwardLegendDataRef, legendData])\n\n    return result\n}\n\n/**\n * Encapsulate the logic for defining/reading the active arc ID,\n * which can be either controlled (handled externally), or uncontrolled\n * (handled internally), we can optionally define a default value when\n * it's uncontrolled.\n */\nconst useActiveId = ({\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId = null,\n}: {\n    activeId?: DatumId | null\n    onActiveIdChange?: (id: DatumId | null) => void\n    defaultActiveId?: DatumId | null\n}) => {\n    const isControlled = typeof activeIdFromProps != 'undefined'\n\n    const [internalActiveId, setInternalActiveId] = useState<DatumId | null>(\n        !isControlled ? defaultActiveId : null\n    )\n\n    const activeId = isControlled ? activeIdFromProps : internalActiveId\n\n    const setActiveId = useCallback(\n        (id: DatumId | null) => {\n            if (onActiveIdChange) {\n                onActiveIdChange(id)\n            }\n\n            if (!isControlled) {\n                setInternalActiveId(id)\n            }\n        },\n        [isControlled, onActiveIdChange, setInternalActiveId]\n    )\n\n    return { activeId, setActiveId }\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n    | 'activeId'\n    | 'onActiveIdChange'\n    | 'defaultActiveId'\n    | 'forwardLegendData'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> &\n    Pick<\n        Partial<CompletePieSvgProps<RawDatum>>,\n        'activeId' | 'onActiveIdChange' | 'defaultActiveId' | 'forwardLegendData'\n    > & {\n        data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    }) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        activeId,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n", "import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n", "import { ReactNode, Fragment, createElement, forwardRef, Ref, ReactElement } from 'react'\nimport {\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n    WithChartRef,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { PieLegends } from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    width,\n    height,\n    margin: partialMargin,\n    colors = defaultProps.colors,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsSkipRadius = defaultProps.arcLabelsSkipRadius,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    transitionMode = defaultProps.transitionMode,\n    legends = defaultProps.legends,\n    forwardLegendData,\n    role = defaultProps.role,\n    forwardedRef,\n}: PieSvgProps<RawDatum> & {\n    forwardedRef: Ref<SVGSVGElement>\n}) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n        forwardLegendData,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcs: null,\n        arcLinkLabels: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                skipRadius={arcLabelsSkipRadius}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = forwardRef(\n    <RawDatum extends MayHaveLabel>(\n        {\n            isInteractive = defaultProps.isInteractive,\n            animate = defaultProps.animate,\n            motionConfig = defaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...otherProps\n        }: PieSvgProps<RawDatum>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            animate={animate}\n            isInteractive={isInteractive}\n            motionConfig={motionConfig}\n            renderWrapper={renderWrapper}\n            theme={theme}\n        >\n            <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} forwardedRef={ref} />\n        </Container>\n    )\n) as <RawDatum extends MayHaveLabel>(\n    props: WithChartRef<PieSvgProps<RawDatum>, SVGSVGElement>\n) => ReactElement\n", "import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps, MayHaveLabel } from './types'\n\nexport const ResponsivePie = forwardRef(\n    <RawDatum extends MayHaveLabel>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<PieSvgProps<RawDatum>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }: { width: number; height: number }) => (\n                <Pie<RawDatum> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <RawDatum extends MayHaveLabel>(\n    props: WithChartRef<ResponsiveProps<PieSvgProps<RawDatum>>, SVGSVGElement>\n) => ReactElement\n", "import {\n    createElement,\n    useEffect,\n    useMemo,\n    useRef,\n    MouseEvent,\n    forwardRef,\n    Ref,\n    ReactElement,\n} from 'react'\nimport { getRelativeCursor, useDimensions, Container, WithChartRef, mergeRefs } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = defaultProps.pixelRatio,\n    colors = defaultProps.colors,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    legends = defaultProps.legends,\n    forwardLegendData,\n    role,\n    forwardedRef,\n}: PieCanvasProps<RawDatum> & {\n    forwardedRef: Ref<HTMLCanvasElement>\n}) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n            activeId: activeIdFromProps,\n            onActiveIdChange,\n            defaultActiveId,\n            forwardLegendData,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        borderWidth,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={mergeRefs(canvasEl, forwardedRef)}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n        />\n    )\n}\n\nexport const PieCanvas = forwardRef(\n    <RawDatum extends MayHaveLabel>(\n        {\n            isInteractive = defaultProps.isInteractive,\n            theme,\n            renderWrapper,\n            ...otherProps\n        }: PieCanvasProps<RawDatum>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }}>\n            <InnerPieCanvas<RawDatum>\n                isInteractive={isInteractive}\n                {...otherProps}\n                forwardedRef={ref}\n            />\n        </Container>\n    )\n) as <RawDatum extends MayHaveLabel>(\n    props: WithChartRef<PieCanvasProps<RawDatum>, HTMLCanvasElement>\n) => ReactElement\n", "import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps, MayHaveLabel } from './types'\n\nexport const ResponsivePieCanvas = forwardRef(\n    <RawDatum extends MayHaveLabel>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<PieCanvasProps<RawDatum>>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }: { width: number; height: number }) => (\n                <PieCanvas<RawDatum> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <RawDatum extends MayHaveLabel>(\n    props: WithChartRef<ResponsiveProps<PieCanvasProps<RawDatum>>, HTMLCanvasElement>\n) => ReactElement\n"],
  "mappings": "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",
  "names": ["staticStyle", "pointerEvents", "ArcLabel", "_ref", "label", "style", "theme", "useTheme", "_jsx", "animated", "g", "transform", "opacity", "progress", "children", "Text", "textAnchor", "dominantBaseline", "_extends", "labels", "text", "fill", "textColor", "getNormalizedAngle", "angle", "normalizedAngle", "Math", "PI", "filterDataBySkipAngle", "data", "skipAngle", "filter", "datum", "abs", "radiansToDegrees", "arc", "endAngle", "startAngle", "arcTransitionModeById", "startAngle", "enter", "arc", "_extends", "endAngle", "update", "leave", "middleAngle", "innerRadius", "outerRadius", "centerRadius", "pushIn", "pushOut", "useArcTransitionMode", "mode", "extraTransition", "useMemo", "transitionMode", "datum", "progress", "computeArcCenter", "offset", "angle", "midAngle", "Math", "PI", "radius", "positionFromAngle", "interpolateArcCenter", "startAngleValue", "endAngleValue", "innerRadiusValue", "outerRadiusValue", "to", "centroid", "x", "y", "useArcCentersTransition", "data", "extra", "_useMotionConfig", "useMotionConfig", "animate", "springConfig", "config", "phases", "transition", "useTransition", "keys", "id", "initial", "from", "immediate", "interpolate", "useArcCenters", "_ref", "_ref$offset", "_ref$skipAngle", "skipAngle", "_ref$computeExtraProp", "computeExtraProps", "filterDataBySkipAngle", "map", "position", "ArcLabelsLayer", "center", "labelAccessor", "label", "radiusOffset", "skipRadius", "textColor", "_ref$component", "component", "ArcLabel", "getLabel", "usePropertyAccessor", "theme", "useTheme", "getTextColor", "useInheritedColor", "filteredData", "filter", "abs", "radiansToDegrees", "_useArcCentersTransit", "Label", "_jsx", "transform", "children", "transitionProps", "createElement", "key", "style", "drawCanvasArcLabels", "ctx", "labels", "setCanvasFont", "text", "textAlign", "textBaseline", "forEach", "drawCanvasText", "fill", "String", "useArcLabels", "useCallback", "ArcLinkLabel", "_ref", "label", "style", "theme", "useTheme", "_jsxs", "animated", "g", "opacity", "children", "_jsx", "path", "fill", "stroke", "linkColor", "strokeWidth", "thickness", "d", "Text", "transform", "textPosition", "textAnchor", "dominantBaseline", "_extends", "labels", "text", "textColor", "computeArcLinkTextAnchor", "arc", "centerAngle", "getNormalizedAngle", "startAngle", "endAngle", "Math", "PI", "computeArcLink", "offset", "diagonalLength", "straightLength", "side", "point2", "point0", "positionFromAngle", "outerRadius", "point1", "x", "y", "points", "lineGenerator", "line", "interpolateLink", "startAngleValue", "endAngleValue", "innerRadiusValue", "outerRadiusValue", "offsetValue", "diagonalLengthValue", "straightLengthValue", "to", "innerRadius", "diagonalLengthAnimated", "straightLengthAnimated", "interpolateTextAnchor", "interpolateTextPosition", "textOffsetValue", "textOffset", "_computeArcLink2", "position", "useArcLinkLabelsTransition", "_ref2", "data", "_ref2$offset", "_ref2$skipAngle", "skipAngle", "_useMotionConfig", "useMotionConfig", "animate", "springConfig", "config", "getLinkColor", "useInheritedColor", "getTextColor", "filteredData", "useMemo", "filterDataBySkipAngle", "transitionPhases", "enter", "datum", "update", "leave", "transition", "useTransition", "keys", "id", "initial", "from", "immediate", "ArcLinkLabelsLayer", "center", "labelAccessor", "_ref$component", "component", "getLabel", "usePropertyAccessor", "_useArcLinkLabelsTran", "Label", "transitionProps", "createElement", "key", "drawCanvasArcLinkLabels", "ctx", "textBaseline", "setCanvasFont", "forEach", "textAlign", "textPropsByEngine", "canvas", "align", "drawCanvasText", "String", "beginPath", "strokeStyle", "lineWidth", "point", "index", "moveTo", "lineTo", "useArcLinks", "_ref$skipAngle", "_ref$offset", "_ref$computeExtraProp", "computeExtraProps", "links", "filter", "abs", "radiansToDegrees", "map", "link", "useArcLinkLabels", "_ref$textOffset", "useCallback", "ArcShape", "_ref", "datum", "style", "onClick", "onMouseEnter", "onMouseMove", "onMouseLeave", "handleClick", "useCallback", "event", "handleMouseEnter", "handleMouseMove", "handleMouseLeave", "_jsx", "animated", "path", "d", "opacity", "fill", "color", "stroke", "borderColor", "strokeWidth", "borderWidth", "id", "interpolateArc", "startAngleValue", "endAngleValue", "innerRadiusValue", "outerRadiusValue", "arcGenerator", "to", "startAngle", "endAngle", "innerRadius", "outerRadius", "Math", "max", "useArcsTransition", "data", "mode", "extra", "_useMotionConfig", "useMotionConfig", "animate", "springConfig", "config", "phases", "useArcTransitionMode", "transition", "useTransition", "keys", "initial", "update", "from", "enter", "leave", "immediate", "interpolate", "ArcsLayer", "center", "transitionMode", "_ref$component", "component", "theme", "useTheme", "getBorderColor", "useInheritedColor", "_useArcsTransition", "Arc", "transform", "children", "transitionProps", "createElement", "key", "_extends", "computeArcBoundingBox", "centerX", "centerY", "radius", "includeCenter", "points", "p0", "positionFromAngle", "degreesToRadians", "push", "x", "y", "p1", "angle", "round", "min", "p", "map", "xs", "_ref2", "ys", "_ref3", "x0", "apply", "x1", "y0", "width", "height", "isCursorInRing", "cursorX", "cursorY", "distance", "getDistance", "findArcUnderCursor", "arcs", "cursorAngle", "getAngle", "find", "useArcGenerator", "_temp", "_ref", "_ref$cornerRadius", "cornerRadius", "_ref$padAngle", "padAngle", "useMemo", "d3Arc", "innerRadius", "arc", "outerRadius", "X", "PieLegends", "_ref", "width", "height", "legends", "data", "toggleSerie", "_jsx", "_Fragment", "children", "map", "legend", "i", "_legend$data", "BoxLegendSvg", "_extends", "containerWidth", "containerHeight", "undefined", "defaultProps", "id", "value", "sortByValue", "innerRadius", "padAngle", "cornerRadius", "layers", "startAngle", "endAngle", "fit", "activeInnerRadiusOffset", "activeOuterRadiusOffset", "borderWidth", "borderColor", "from", "modifiers", "enableArcLabels", "arcLabel", "arcLabelsSkipAngle", "arcLabelsSkipRadius", "arcLabelsRadiusOffset", "arcLabelsTextColor", "theme", "enableArcLinkLabels", "arcLinkLabel", "arcLinkLabelsSkipAngle", "arcLinkLabelsOffset", "arcLinkLabelsDiagonalLength", "arcLinkLabelsStraightLength", "arcLinkLabelsThickness", "arcLinkLabelsTextOffset", "arcLinkLabelsTextColor", "arcLinkLabelsColor", "colors", "scheme", "defs", "fill", "isInteractive", "animate", "motionConfig", "transitionMode", "tooltip", "datum", "BasicTooltip", "formattedValue", "enableChip", "color", "role", "pixelRatio", "window", "_window$devicePixelRa", "devicePixelRatio", "j", "useNormalizedData", "_ref$id", "_ref$value", "valueFormat", "_ref$colors", "getId", "usePropertyAccessor", "getValue", "formatValue", "useValueFormatter", "getColor", "useOrdinalColorScale", "useMemo", "_datum$label", "datumId", "datumValue", "normalizedDatum", "label", "hidden", "usePieArcs", "_ref2", "outerRadius", "activeId", "hiddenIds", "forwardLegendData", "pie", "innerPie", "d3Pie", "d", "degreesToRadians", "sortValues", "result", "hiddenData", "filter", "item", "includes", "dataWithArc", "arc", "angle", "Math", "abs", "index", "thickness", "angleDeg", "radiansToDegrees", "legendData", "forwardLegendDataRef", "useRef", "useEffect", "current", "useActiveId", "_ref3", "activeIdFromProps", "onActiveIdChange", "_ref3$defaultActiveId", "defaultActiveId", "isControlled", "_useState", "useState", "internalActiveId", "setInternalActiveId", "setActiveId", "useCallback", "usePie", "_ref4", "radius", "_ref4$startAngle", "_ref4$endAngle", "_ref4$padAngle", "_ref4$sortByValue", "_ref4$cornerRadius", "_ref4$activeInnerRadi", "_ref4$activeOuterRadi", "_useActiveId", "_useState2", "setHiddenIds", "pieArcs", "state", "indexOf", "concat", "arcGenerator", "useArcGenerator", "usePieFromBox", "_ref5", "_ref5$innerRadius", "innerRadiusRatio", "_ref5$startAngle", "_ref5$endAngle", "_ref5$padAngle", "_ref5$sortByValue", "_ref5$cornerRadius", "_ref5$fit", "_ref5$activeInnerRadi", "_ref5$activeOuterRadi", "_useActiveId2", "_useState3", "computedProps", "boundingBox", "min", "centerX", "centerY", "_computeArcBoundingBo", "computeArcBoundingBox", "points", "box", "_objectWithoutPropertiesLoose", "_excluded", "ratio", "adjustedBox", "x", "y", "debug", "usePieLayerContext", "_ref6", "Arcs", "center", "onClick", "onMouseEnter", "onMouseMove", "onMouseLeave", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "handleClick", "event", "handleMouseEnter", "createElement", "handleMouseMove", "handleMouseLeave", "ArcsLayer", "$", "InnerPie", "_ref$sortByValue", "_ref$layers", "_ref$startAngle", "_ref$endAngle", "_ref$padAngle", "_ref$fit", "_ref$innerRadius", "_ref$cornerRadius", "_ref$activeInnerRadiu", "_ref$activeOuterRadiu", "partialMargin", "margin", "_ref$borderWidth", "_ref$borderColor", "_ref$enableArcLabels", "_ref$arcLabel", "_ref$arcLabelsSkipAng", "_ref$arcLabelsSkipRad", "_ref$arcLabelsTextCol", "_ref$arcLabelsRadiusO", "arcLabelsComponent", "_ref$enableArcLinkLab", "_ref$arcLinkLabel", "_ref$arcLinkLabelsSki", "_ref$arcLinkLabelsOff", "_ref$arcLinkLabelsDia", "_ref$arcLinkLabelsStr", "_ref$arcLinkLabelsThi", "_ref$arcLinkLabelsTex", "_ref$arcLinkLabelsTex2", "_ref$arcLinkLabelsCol", "arcLinkLabelComponent", "_ref$defs", "_ref$fill", "_ref$isInteractive", "_ref$tooltip", "_ref$transitionMode", "_ref$legends", "_ref$role", "forwardedRef", "_useDimensions", "useDimensions", "outerWidth", "outerHeight", "innerWidth", "innerHeight", "normalizedData", "_usePieFromBox", "boundDefs", "bindDefs", "layerById", "arcs", "arcLinkLabels", "arcLabels", "ArcLinkLabelsLayer", "skipAngle", "offset", "diagonalLength", "straightLength", "strokeWidth", "textOffset", "textColor", "linkColor", "component", "ArcLabelsLayer", "radiusOffset", "skipRadius", "length", "layerContext", "SvgWrapper", "ref", "layer", "Fragment", "Pie", "forwardRef", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "Container", "ResponsivePie", "defaultWidth", "defaultHeight", "onResize", "debounceResize", "props", "ResponsiveWrapper", "InnerPieCanvas", "_ref$pixelRatio", "canvasEl", "useTheme", "getBorderColor", "useInheritedColor", "useArcLabels", "useArcLinkLabels", "ctx", "getContext", "scale", "fillStyle", "background", "fillRect", "save", "translate", "left", "top", "context", "forEach", "beginPath", "strokeStyle", "lineWidth", "stroke", "drawCanvasArcLinkLabels", "drawCanvasArcLabels", "restore", "renderLegendToCanvas", "getArcFromMouse", "_getRelativeCursor", "getRelativeCursor", "hoveredArc", "findArcUnderCursor", "find", "handleMouseHover", "mergeRefs", "style", "cursor", "PieCanvas", "ResponsivePieCanvas"]
}
